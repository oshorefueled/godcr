// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"image"
	"image/png"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"
)

const source = "/ui/assets/decredicons/"
const destination = "decredmaterial"
const pkgName = "ui"
const filename = "decredicons.go"
const suffix = "Icon"

var out = new(bytes.Buffer)

func main() {
	err := genIcons()
	if err != nil {
		fmt.Printf("ERROR: %v", err)
	}

	raw := out.Bytes()
	formatted, err := format.Source(raw)
	if err != nil {
		fmt.Printf("ERROR: %v", err)
	}
	if err := ioutil.WriteFile(filepath.Join(destination, filename), formatted, 0666); err != nil {
		fmt.Printf("ERROR: %v", err)
	}
}

func genIcons() error {
	_, b, _, _ := runtime.Caller(0)
	d := path.Join(path.Dir(b))
	f, err := os.Open(filepath.Dir(d) + source)
	if err != nil {
		return err
	}
	defer f.Close()

	infos, err := f.Readdir(-1)
	if err != nil {
		return err
	}

	out.WriteString("// generated by go run gen.go; DO NOT EDIT\n\npackage ")
	out.WriteString(pkgName)
	out.WriteString("\n\n")

	for _, info := range infos {
		name := info.Name()
		slice := strings.Split(name, ".")
		n := strings.Title(slice[0]) + suffix
		fmt.Fprintf(out, "var %s = []byte{", n)
		data, err := readIcon(name)
		if err != nil {
			fmt.Printf("readIconError: %v\n", err)
			continue
		}
		for i, x := range data {
			if i&0x0f == 0x00 {
				out.WriteByte('\n')
			}
			fmt.Fprintf(out, "%#02x, ", x)
		}
		fmt.Fprintf(out, "\n}\n\n")
	}

	return err
}

func readIcon(icon string) ([]byte, error) {
	_, b, _, _ := runtime.Caller(0)
	d := path.Join(path.Dir(b))
	f, err := os.Open(filepath.Dir(d) + source + icon)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	buf := new(bytes.Buffer)
	img, _, err := image.Decode(f)
	if err != nil {
		return nil, err
	}

	err = png.Encode(buf, img)
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}
